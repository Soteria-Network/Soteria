name: Build Soteria

on:
#  push:
#    branches:
#      - release*
#  pull_request:
#    branches:
#      - master
#      - develop
#      - release*
#    paths-ignore:
#      - 'binaries/**'
#      - 'doc/**'
#      - 'whitepaper/**'
#      - '*.md'
  workflow_dispatch:
    # This creates a "Run workflow" button on the github repo webpage when the "Build Soteria" 
    #     workflow is selected on the "Actions" tab. But only if this workflow is in
    #     the branch which is selected on github as the "default branch".
    inputs:
      target:
        description: 'Target branch to run'
        required: true

env:
  SCRIPTS: ${{ GITHUB.WORKSPACE }}/.github/scripts

jobs:
  check-jobs:
      # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-20.04
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'never'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '[
                          "binaries/**",
                          "community/**",
                          "contrib/**",
                          "doc/**",
                          "roadmap/**",
                          "share/**",
                          "static-builds/**",
                          "whitepaper/**",
                          "**/*.md"
                          ]'
          do_not_skip: '["workflow_dispatch", "schedule"]'

  build:
    needs: check-jobs
    runs-on: ubuntu-20.04
    
    strategy:
      matrix:
       OS: [ 'windows', 'linux', 'linux-disable-wallet', 'osx', 'arm32v7', 'arm32v7-disable-wallet', 'aarch64', 'aarch64-disable-wallet' ]
     # OS: [ 'windows', 'linux', 'arm32v7', 'aarch64', 'osx']
#&&&&&& Beginning- section to free up space on root for the builds and for 30GB of swap
    steps:
    - name: Print Original Available Memory and Storage
      shell: bash
      run: |
        echo "Original Available Memory and Storage:"
        free -h
        echo
        swapon --show
        echo
        df -vh
        echo

    - name: Delete Unwanted Software
      shell: bash
      run: |
        echo "Removing Unwanted Software"
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force

    - name: Print Available Memory and Storage after Unwanted Software Removal
      shell: bash
      run: |
        echo "Original Available Memory and Storage after Unwanted Software Removal:"
        free -h
        echo
        swapon --show
        echo
        df -vh
        echo

#     We use a SWAP_FILE variable because some runner VMs allocate /swapfile and some use /mnt/swapfile
    - name: Delete the existing swap
      shell: bash
      run: |
        export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
        sudo swapoff "${SWAP_FILE}"
        sudo rm "${SWAP_FILE}"

    - name: Print Available Memory and Storage after Deleting Swap
      shell: bash
      run: |
        echo "Available Memory and Storage after Deleting Swap:"
        free -h
        echo
        swapon --show
        echo
        df -vh
        echo

    - name: Allocate swap on root
      shell: bash
      run: |
        sudo fallocate -l 30G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile

    - name: Print Finnal Available Memory and Storage
      shell: bash
      run: |
        echo "Final Available Memory and Storage:"
        free -h
        echo
        swapon --show
        echo
        df -vh
        echo
#&&&&&& End- section to free up space on root for the builds and for 30GB of swap

    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Checkout the Code
      uses: actions/checkout@v1

    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Install Build Tools
      run: sudo ${SCRIPTS}/00-install-deps.sh ${{ MATRIX.OS }}

    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Cache dependencies.
      uses: actions/cache@v4
      with:
       path: |
        ${{ GITHUB.WORKSPACE }}/depends/built
        ${{ GITHUB.WORKSPACE }}/depends/sources
        ${{ GITHUB.WORKSPACE }}/depends/work
       key: ${{ MATRIX.OS }}
      
    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Build dependencies.
      run: ${SCRIPTS}/02-copy-build-dependencies.sh ${{ MATRIX.OS }} ${{ GITHUB.WORKSPACE }} ${{ GITHUB.BASE_REF }} ${{ GITHUB.REF }}

    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Add Dependencies to the System PATH
      run: ${SCRIPTS}/03-export-path.sh ${{ MATRIX.OS }} ${{ GITHUB.WORKSPACE }}

    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Build Config
      run: cd ${{ GITHUB.WORKSPACE }} && ./autogen.sh

    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Configure Build
      run: ${SCRIPTS}/04-configure-build.sh ${{ MATRIX.OS }} ${{ GITHUB.WORKSPACE }}

    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Build Soteria
      run: make -j2

# Skip the binary checks for now.
    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Check Binary Security
      run: ${SCRIPTS}/05-binary-checks.sh ${{ MATRIX.OS }} ${{ GITHUB.WORKSPACE }}

    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Package Up the Build
      run: ${SCRIPTS}/06-package.sh ${{ MATRIX.OS }} ${{ GITHUB.WORKSPACE }} ${{ GITHUB.BASE_REF }} ${{ GITHUB.REF }}
    
    - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
      name: Upload Artifacts to Job
      uses: actions/upload-artifact@master
      with:
        name: ${{ MATRIX.OS }}
        path: ${{ GITHUB.WORKSPACE }}/release
